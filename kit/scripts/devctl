#!/usr/bin/env bash
set -euo pipefail

# devctl - helper for devkit operations
# Usage: devctl -p <project> <cmd> [args...]
# Commands: up, down, restart, scale N, exec <n> <cmd>, attach <n>, logs <n>, status,
#           allow <domain>, proxy {tinyproxy|envoy}, warm, maintain, check-net

ROOT_DIR="$(readlink -f "$(dirname "${BASH_SOURCE[0]}")"/../..)"
KIT_DIR="$ROOT_DIR/kit"
OVERLAYS_DIR="$ROOT_DIR/overlays"

PROJECT=""
PROFILE=""

die() { echo "devctl: $*" >&2; exit 1; }

compose_files() {
  local files="-f $KIT_DIR/compose.yml"
  # Default to dns profile unless explicitly overridden
  local effective_profile="$PROFILE"
  if [[ -z "$effective_profile" ]]; then
    effective_profile="dns"
  fi
  if [[ -n "$effective_profile" ]]; then
    IFS=',' read -ra profs <<< "$effective_profile"
    for p in "${profs[@]}"; do
      case "$p" in
        hardened) files+=" -f $KIT_DIR/compose.hardened.yml" ;;
        dns) files+=" -f $KIT_DIR/compose.dns.yml" ;;
        envoy) files+=" -f $KIT_DIR/compose.envoy.yml" ;;
        *) die "unknown profile: $p" ;;
      esac
    done
  fi
  if [[ -f "$OVERLAYS_DIR/$PROJECT/compose.override.yml" ]]; then
    files+=" -f $OVERLAYS_DIR/$PROJECT/compose.override.yml"
  fi
  echo "$files"
}

ensure_project() {
  [[ -n "$PROJECT" ]] || die "-p <project> is required"
  [[ -d "$OVERLAYS_DIR/$PROJECT" ]] || die "overlay not found: $PROJECT"
}

cmd_up() { ensure_project; docker compose $(compose_files) up -d; }
cmd_down() { ensure_project; docker compose $(compose_files) down; }
cmd_restart() { ensure_project; docker compose $(compose_files) restart; }
cmd_scale() { ensure_project; local n=${1:-1}; docker compose $(compose_files) up -d --scale dev-agent=$n; }
cmd_exec() { ensure_project; local n=${1:-1}; shift || true; docker compose $(compose_files) exec --index "$n" dev-agent "$@"; }
cmd_attach() { ensure_project; local n=${1:-1}; docker compose $(compose_files) attach --index "$n" dev-agent; }
cmd_logs() { ensure_project; local n=${1:-1}; docker compose $(compose_files) logs -f dev-agent; }
cmd_status() { ensure_project; docker compose $(compose_files) ps; }

cmd_proxy() {
  ensure_project; local which=${1:-tinyproxy}
  case "$which" in
    tinyproxy)
      echo "Switching agent env to tinyproxy... (ensure overlay uses HTTP(S)_PROXY=http://tinyproxy:8888)" ;;
    envoy)
      echo "Enable envoy profile: add --profile envoy to up/restart commands" ;;
    *) die "unknown proxy: $which" ;;
  esac
}

cmd_allow() {
  ensure_project; local domain=${1:-}
  [[ -n "$domain" ]] || die "allow <domain> is required"
  local allowlist="$KIT_DIR/proxy/allowlist.txt"
  local dnsconf="$KIT_DIR/dns/dnsmasq.conf"
  if ! grep -qE "^${domain//./\\.}$" "$allowlist"; then
    echo "$domain" >> "$allowlist"
    echo "Added to proxy allowlist: $domain"
  else
    echo "Already in proxy allowlist: $domain"
  fi
  local dnspat="server=/${domain}/1.1.1.1"
  if ! grep -qF "$dnspat" "$dnsconf"; then
    echo "$dnspat" >> "$dnsconf"
    echo "Added to DNS allowlist: $domain"
  else
    echo "Already in DNS allowlist: $domain"
  fi
  echo "Note: restart dns and proxy to apply (devctl -p $PROJECT restart)"
}

cmd_warm() {
  ensure_project
  local hook=$(grep -E '^\s*warm:' "$OVERLAYS_DIR/$PROJECT/devkit.yaml" | sed 's/.*warm:\s*//')
  if [[ -n "$hook" ]]; then
    docker compose $(compose_files) exec dev-agent bash -lc "$hook"
  else
    echo "No warm hook defined"
  fi
}

cmd_maintain() {
  ensure_project
  local hook=$(grep -E '^\s*maintain:' "$OVERLAYS_DIR/$PROJECT/devkit.yaml" | sed 's/.*maintain:\s*//')
  if [[ -n "$hook" ]]; then
    docker compose $(compose_files) exec dev-agent bash -lc "$hook"
  else
    echo "No maintain hook defined"
  fi
}

cmd_check_net() {
  ensure_project
  docker compose $(compose_files) exec dev-agent bash -lc 'set -x; env | grep -E "HTTP(S)?_PROXY|NO_PROXY"; curl -Is https://github.com | head -n1; (curl -Is https://example.com | head -n1 || true)'
}

main() {
  local cmd=""; local args=()
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -p|--project) PROJECT="$2"; shift 2; continue ;;
      --profile) PROFILE="$2"; shift 2; continue ;;
      up|down|restart|scale|exec|attach|logs|status|allow|proxy|warm|maintain|check-net|check-codex|check-sts|tmux-shells|codex-auth|creds|ssh-setup|ssh-test|repo-config-ssh|repo-push-ssh|repo-config-https|repo-push-https|worktrees-init|worktrees-branch|worktrees-status|worktrees-sync|worktrees-tmux|bootstrap|open)
        cmd="$1"; shift; continue ;;
      *) args+=("$1"); shift; continue ;;
    esac
  done
  [[ -n "$cmd" ]] || die "command required"
  case "$cmd" in
    up) cmd_up ;;
    down) cmd_down ;;
    restart) cmd_restart ;;
    scale) cmd_scale "${args[0]:-1}" ;;
    exec) cmd_exec "${args[@]}" ;;
    attach) cmd_attach "${args[@]}" ;;
    logs) cmd_logs "${args[@]}" ;;
    status) cmd_status ;;
    allow) cmd_allow "${args[0]:-}" ;;
    proxy) cmd_proxy "${args[0]:-tinyproxy}" ;;
    warm) cmd_warm ;;
    maintain) cmd_maintain ;;
    check-net) cmd_check_net ;;
    check-codex)
      ensure_project
      echo "== Proxy env in agent =="
      docker compose $(compose_files) exec dev-agent bash -lc 'env | grep -E "^HTTPS?_PROXY=|^NO_PROXY=" || true'
      echo
      echo "== Curl checks (through proxy) =="
      docker compose $(compose_files) exec dev-agent bash -lc 'set -e; echo -n "chatgpt.com          : "; curl -sSvo /dev/null -w "%{http_code}\\n" https://chatgpt.com || true'
      docker compose $(compose_files) exec dev-agent bash -lc 'set -e; echo -n "chatgpt.com/backend..: "; curl -sSvo /dev/null -w "%{http_code}\\n" https://chatgpt.com/backend-api/codex/responses || true'
      echo
      echo "== Codex exec (expect ok) =="
      docker compose $(compose_files) exec dev-agent bash -lc "mkdir -p /workspace/.devhome; HOME=/workspace/.devhome timeout 15s codex exec 'Reply with: ok' || true"
      ;;
    check-sts)
      ensure_project
      local which="${args[0]:-}"
      local PX=""
      case "$which" in
        envoy) PX=http://envoy:3128 ;;
        tinyproxy) PX=http://tinyproxy:8888 ;;
        "") PX="" ;;
        *) die "Usage: check-sts [envoy|tinyproxy]" ;;
      esac
      echo "== STS via ${which:-compose env} =="
      if [[ -n "$PX" ]]; then
        docker compose $(compose_files) exec dev-agent bash -lc "HTTPS_PROXY='$PX' HTTP_PROXY='$PX' curl -sSvo /dev/null -w '%{http_code}\\n' https://sts.amazonaws.com || true"
        docker compose $(compose_files) exec dev-agent bash -lc "HTTPS_PROXY='$PX' HTTP_PROXY='$PX' aws sts get-caller-identity || true"
      else
        docker compose $(compose_files) exec dev-agent bash -lc "curl -sSvo /dev/null -w '%{http_code}\\n' https://sts.amazonaws.com || true"
        docker compose $(compose_files) exec dev-agent bash -lc "aws sts get-caller-identity || true"
      fi
      ;;
    tmux-shells)
      ensure_project
      local n="${args[0]:-2}"
      command -v tmux >/dev/null 2>&1 || die "tmux not found on host"
  docker compose $(compose_files) up -d --scale dev-agent="$n"
  # Ensure SSH is configured in each instance (best-effort)
  local j=1
  while [[ "$j" -le "$n" ]]; do
    "$0" -p "$PROJECT" ssh-setup --index "$j" >/dev/null 2>&1 || true
    j=$((j+1))
  done
      local sess="devkit-shells"
  tmux new-session -d -s "$sess" "docker compose $(compose_files) exec --index 1 dev-agent bash -lc 'mkdir -p /workspace/.devhome-agent1; export HOME=/workspace/.devhome-agent1; cd /workspace; exec bash'"
  tmux rename-window -t "$sess":0 "agent-1" >/dev/null 2>&1 || true
  local i=2
  while [[ "$i" -le "$n" ]]; do
    tmux new-window -t "$sess" -n "agent-$i" "docker compose $(compose_files) exec --index $i dev-agent bash -lc 'mkdir -p /workspace/.devhome-agent$((i)); export HOME=/workspace/.devhome-agent$((i)); cd /workspace; exec bash'"
    i=$((i+1))
  done
  tmux attach -t "$sess"
  ;;
    codex-auth)
      ensure_project
      local sub="${args[0]:-}"; shift || true
      case "$sub" in
        import)
          local file="${args[1]:-}"; local idx="${args[2]:-1}"
          [[ -f "$file" ]] || die "auth.json file not found: $file"
          docker compose $(compose_files) exec -T --index "$idx" dev-agent bash -lc 'mkdir -p /workspace/.devhome/.codex && cat > /workspace/.devhome/.codex/auth.json' < "$file"
          echo "Imported auth.json into instance $idx"
          ;;
        show)
          local idx="${args[1]:-1}"
          docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'ls -l /workspace/.devhome/.codex/auth.json || true; head -c 120 /workspace/.devhome/.codex/auth.json 2>/dev/null || true; echo'
          ;;
        clear)
          local idx="${args[1]:-1}"
          docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'rm -f /workspace/.devhome/.codex/auth.json && echo "cleared /workspace/.devhome/.codex/auth.json" || true'
          ;;
        *) die "Usage: codex-auth {import <auth.json> [N] | show [N] | clear [N]}" ;;
      esac
      ;;
    exec-cd)
      ensure_project
      local idx="${args[0]:-1}"; local subpath="${args[1]:-}"; shift || true
      [[ -n "$subpath" ]] || die "Usage: exec-cd <index> <subpath> [cmd...]"
      shift || true
      local dest="$subpath"
      if [[ "${subpath:0:1}" != "/" ]]; then
        dest="${DEV_ROOT:-/workspaces/dev}/$subpath"
      fi
      local cmdstr
      if [[ $# -gt 0 ]]; then cmdstr="$*"; else cmdstr="bash"; fi
      docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc "cd \"$dest\" && exec $cmdstr"
      ;;
    attach-cd)
      ensure_project
      local idx="${args[0]:-1}"; local subpath="${args[1]:-}"; shift || true
      [[ -n "$subpath" ]] || die "Usage: attach-cd <index> <subpath>"
      local dest="$subpath"
      if [[ "${subpath:0:1}" != "/" ]]; then
        dest="${DEV_ROOT:-/workspaces/dev}/$subpath"
      fi
      docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc "cd \"$dest\" && exec bash"
      ;;
    creds)
      ensure_project
      # creds [--env-file FILE]
      local envfile=""
      if [[ "${args[0]:-}" == "--env-file" ]]; then envfile="${args[1]:-}"; shift 2 || true; fi
      if [[ -n "$envfile" ]]; then
        [[ -f "$envfile" ]] || die "env file not found: $envfile"
        set -a; source "$envfile"; set +a
      fi
      : "${AWS_ACCESS_KEY_ID:?AWS_ACCESS_KEY_ID required (or provide --env-file)}"
      : "${AWS_SECRET_ACCESS_KEY:?AWS_SECRET_ACCESS_KEY required (or provide --env-file)}"
      local prof="${AWS_PROFILE:-codex}"; local region="${AWS_DEFAULT_REGION:-us-east-2}"
      docker compose $(compose_files) exec -T dev-agent bash -lc "mkdir -p /workspace/.aws && cat > /workspace/.aws/credentials <<EOF
[$prof]
aws_access_key_id=$AWS_ACCESS_KEY_ID
aws_secret_access_key=$AWS_SECRET_ACCESS_KEY
aws_session_token=${AWS_SESSION_TOKEN:-}
EOF
cat > /workspace/.aws/config <<EOF
[profile $prof]
region=$region
EOF
echo 'wrote /workspace/.aws/{credentials,config}'"
      ;;
    ssh-setup)
      # ssh-setup [--key <path>] [--index N]
      ensure_project
      local idx=1
      local keyfile=""
      local a=("${args[@]}")
      for ((i=0; i<${#a[@]}; i++)); do
        case "${a[$i]}" in
          --key)
            keyfile="${a[$((i+1))]:-}"; i=$((i+1));;
          --index)
            idx="${a[$((i+1))]:-1}"; i=$((i+1));;
          *)
            if [[ -z "$keyfile" ]]; then keyfile="${a[$i]}"; fi;;
        esac
      done
      local host_id_ed25519="${keyfile:-$HOME/.ssh/id_ed25519}"
      if [[ ! -f "$host_id_ed25519" ]]; then host_id_ed25519="$HOME/.ssh/id_rsa"; fi
      local host_pub_default="$host_id_ed25519.pub"
      local host_pub="$host_pub_default"
      local derived_pub=""
      local host_known="$HOME/.ssh/known_hosts"
      [[ -f "$host_id_ed25519" ]] || die "Host key not found: $host_id_ed25519"
      if [[ ! -f "$host_pub" ]]; then
        echo "Public key not found; deriving from private..."
        derived_pub=$(mktemp)
        ssh-keygen -y -f "$host_id_ed25519" > "$derived_pub"
        host_pub="$derived_pub"
      fi
      echo "Allowlisting ssh.github.com in proxy + DNS and restarting proxy/DNS..."
      cmd_allow ssh.github.com || true
      docker compose $(compose_files) restart tinyproxy dns || true
      echo "Configuring /workspace/.devhome/.ssh in container index $idx..."
      docker compose $(compose_files) exec -T --index "$idx" dev-agent bash -lc 'mkdir -p /workspace/.devhome/.ssh && chmod 700 /workspace/.devhome/.ssh'
      echo "Copying private/public keys..."
      docker compose $(compose_files) exec -T --index "$idx" dev-agent bash -lc 'cat > /workspace/.devhome/.ssh/id_ed25519 && chmod 600 /workspace/.devhome/.ssh/id_ed25519' < "$host_id_ed25519"
      docker compose $(compose_files) exec -T --index "$idx" dev-agent bash -lc 'cat > /workspace/.devhome/.ssh/id_ed25519.pub && chmod 644 /workspace/.devhome/.ssh/id_ed25519.pub' < "$host_pub"
      if [[ -f "$host_known" ]]; then
        echo "Copying known_hosts..."
        docker compose $(compose_files) exec -T --index "$idx" dev-agent bash -lc 'cat > /workspace/.devhome/.ssh/known_hosts && chmod 644 /workspace/.devhome/.ssh/known_hosts' < "$host_known"
      fi
      echo "Writing SSH config for GitHub via proxy at port 443..."
      docker compose $(compose_files) exec -T --index "$idx" dev-agent bash -lc 'cat > /workspace/.devhome/.ssh/config <<EOF
Host github.com
  HostName ssh.github.com
  Port 443
  User git
  ProxyCommand nc -X connect -x tinyproxy:8888 %h %p
  IdentityFile /workspace/.devhome/.ssh/id_ed25519
  IdentitiesOnly yes
  StrictHostKeyChecking accept-new
EOF
chmod 600 /workspace/.devhome/.ssh/config'
      echo "Configuring git to use container SSH config (core.sshCommand)..."
      docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc "git config --global core.sshCommand 'ssh -F /workspace/.devhome/.ssh/config'"
      # cleanup derived pub
      if [[ -n "$derived_pub" && -f "$derived_pub" ]]; then rm -f "$derived_pub"; fi
      echo "SSH setup complete for container index $idx. Test with: scripts/devkit ssh-test $idx"
      ;;
    ssh-test)
      ensure_project
      local idx="${args[0]:-1}"
      docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'ssh -F /workspace/.devhome/.ssh/config -T github.com -p 443 -o BatchMode=yes || true'
      ;;
    repo-push-ssh)
      # repo-push-ssh <repo-path> [--index N]
      ensure_project
      local idx=1
      local repo_path=""
      local a=("${args[@]}")
      for ((i=0; i<${#a[@]}; i++)); do
        case "${a[$i]}" in
          --index)
            idx="${a[$((i+1))]:-1}"; i=$((i+1));;
          *)
            if [[ -z "$repo_path" ]]; then repo_path="${a[$i]}"; fi;;
        esac
      done
      [[ -n "$repo_path" ]] || die "Usage: repo-push-ssh <repo-path> [--index N]"
      # Best-effort ensure SSH is configured
      "$0" -p "$PROJECT" ssh-setup --index "$idx" || true
      # Determine base path per overlay
      local base="/workspace"; [[ "$PROJECT" == "dev-all" ]] && base="/workspaces/dev"
      local dest="$base/$repo_path"; [[ -z "$repo_path" || "$repo_path" == "." ]] && dest="$base"
      docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'set -euo pipefail; export HOME=/workspace/.devhome; cd '"'$dest'"'; cur=$(git rev-parse --abbrev-ref HEAD); url=$(git remote get-url origin 2>/dev/null || true); if [[ -z "$url" ]]; then echo "No origin remote configured" >&2; exit 1; fi; if [[ "$url" =~ ^https://github.com/([^/]+)/([^/.]+)(\.git)?$ ]]; then newurl=git@github.com:${BASH_REMATCH[1]}/${BASH_REMATCH[2]}.git; echo Setting SSH origin to "$newurl"; git remote set-url origin "$newurl"; fi; echo Pushing branch "$cur" to origin...; GIT_SSH_COMMAND="ssh -F /workspace/.devhome/.ssh/config" git push -u origin HEAD'
      ;;
    repo-config-ssh)
      # repo-config-ssh <repo-path> [--index N]
      ensure_project
      local idx=1; local repo_path="${args[0]:-}"
      [[ -n "$repo_path" ]] || die "Usage: repo-config-ssh <repo-path> [--index N]"
      shift || true
      if [[ "${args[0]:-}" == "--index" ]]; then idx="${args[1]:-1}"; fi
      local base="/workspace"; [[ "$PROJECT" == "dev-all" ]] && base="/workspaces/dev"
      local dest="$base/$repo_path"; [[ -z "$repo_path" || "$repo_path" == "." ]] && dest="$base"
      "$0" -p "$PROJECT" ssh-setup --index "$idx" >/dev/null 2>&1 || true
      docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'set -euo pipefail; export HOME=/workspace/.devhome; cd '"'$dest'"'; url=$(git remote get-url origin 2>/dev/null || true); if [[ -z "$url" ]]; then echo "No origin remote configured" >&2; exit 1; fi; if [[ "$url" =~ ^https://github.com/([^/]+)/([^/.]+)(\.git)?$ ]]; then newurl=git@github.com:${BASH_REMATCH[1]}/${BASH_REMATCH[2]}.git; echo Setting SSH origin to "$newurl"; git remote set-url origin "$newurl"; else echo "Origin already SSH: $url"; fi'
      ;;
    repo-config-https)
      # repo-config-https <repo-path> [--index N]
      ensure_project
      local idx=1; local repo_path="${args[0]:-}"
      [[ -n "$repo_path" ]] || die "Usage: repo-config-https <repo-path> [--index N]"
      shift || true
      if [[ "${args[0]:-}" == "--index" ]]; then idx="${args[1]:-1}"; fi
      local base="/workspace"; [[ "$PROJECT" == "dev-all" ]] && base="/workspaces/dev"
      local dest="$base/$repo_path"; [[ -z "$repo_path" || "$repo_path" == "." ]] && dest="$base"
      docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'set -euo pipefail; cd '"'$dest'"'; url=$(git remote get-url origin 2>/dev/null || true); if [[ -z "$url" ]]; then echo "No origin remote configured" >&2; exit 1; fi; if [[ "$url" =~ ^git@github.com:([^/]+)/([^/.]+)(\.git)?$ ]]; then newurl=https://github.com/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}.git; echo Setting HTTPS origin to "$newurl"; git remote set-url origin "$newurl"; else echo "Origin already HTTPS: $url"; fi'
      ;;
    repo-push-https)
      # repo-push-https <repo-path> [--index N]
      ensure_project
      local idx=1; local repo_path="${args[0]:-}"; [[ -n "$repo_path" ]] || die "Usage: repo-push-https <repo-path> [--index N]"; shift || true
      if [[ "${args[0]:-}" == "--index" ]]; then idx="${args[1]:-1}"; fi
      "$0" -p "$PROJECT" repo-config-https "$repo_path" --index "$idx"
      local base="/workspace"; [[ "$PROJECT" == "dev-all" ]] && base="/workspaces/dev"; local dest="$base/$repo_path"; [[ -z "$repo_path" || "$repo_path" == "." ]] && dest="$base"
      docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'set -euo pipefail; cd '"'$dest'"'; echo Pushing branch $(git rev-parse --abbrev-ref HEAD) to origin (HTTPS)...; git push -u origin HEAD'
      ;;
    worktrees-init)
      # worktrees-init <repo> <count> [--base agent] [--branch main]
      # Creates per-agent worktrees under <dev-root>/<base><i>/<repo>
      # Example: worktrees-init ouroboros-ide 3  => agent2/ouroboros-ide, agent3/ouroboros-ide
      local repo="${args[0]:-}"; local count="${args[1]:-}"; shift || true; shift || true
      local base="agent"; local upstream="main"
      while [[ $# -gt 0 ]]; do
        case "$1" in
          --base) base="$2"; shift 2 ;;
          --branch) upstream="$2"; shift 2 ;;
          *) shift ;;
        esac
      done
      [[ -n "$repo" && -n "$count" ]] || die "Usage: worktrees-init <repo> <count> [--base agent] [--branch main]"
      # Determine dev root (host): one directory above devkit root
      local host_dev_root
      host_dev_root="$(readlink -f "$ROOT_DIR/..")"
      [[ -d "$host_dev_root/$repo/.git" ]] || die "Repo not found: $host_dev_root/$repo"
      local i=2
      while [[ "$i" -le "$count" ]]; do
        local wt_dir="$host_dev_root/${base}${i}/$repo"
        mkdir -p "$(dirname "$wt_dir")"
        if [[ ! -d "$wt_dir/.git" ]]; then
          echo "Creating worktree: $wt_dir (branch ${base}${i}/$upstream)"
          git -C "$host_dev_root/$repo" fetch origin "$upstream" || true
          git -C "$host_dev_root/$repo" worktree add -b "${base}${i}/$upstream" "$wt_dir" "origin/$upstream" || {
            # fallback: add worktree on existing branch or current HEAD
            git -C "$host_dev_root/$repo" worktree add "$wt_dir" "origin/$upstream" || git -C "$host_dev_root/$repo" worktree add "$wt_dir"
          }
        else
          echo "Worktree already exists: $wt_dir"
        fi
        i=$((i+1))
      done
      ;;
    worktrees-branch)
      # worktrees-branch <repo> <index> <branch>
      ensure_project
      [[ "$PROJECT" == "dev-all" ]] || die "Use -p dev-all for worktrees-branch"
      local repo="${args[0]:-}"; local idx="${args[1]:-}"; local branch="${args[2]:-}"
      [[ -n "$repo" && -n "$idx" && -n "$branch" ]] || die "Usage: -p dev-all worktrees-branch <repo> <index> <branch>"
      local base="/workspaces/dev"
      local path; if [[ "$idx" -eq 1 ]]; then path="$base/$repo"; else path="$base/agent${idx}/$repo"; fi
      docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'set -euo pipefail; cd '"'$path'"'; git fetch origin || true; git checkout -B '"'$branch'"' '"'origin/$branch'"' || git checkout -B '"'$branch'"''
      ;;
    worktrees-status)
      # worktrees-status <repo> [--all|--index N]
      ensure_project
      [[ "$PROJECT" == "dev-all" ]] || die "Use -p dev-all for worktrees-status"
      local repo="${args[0]:-}"; shift || true
      local idx=""; if [[ "${args[0]:-}" == "--index" ]]; then idx="${args[1]:-}"; fi
      local base="/workspaces/dev"
      if [[ -n "$idx" ]]; then
        local p; if [[ "$idx" -eq 1 ]]; then p="$base/$repo"; else p="$base/agent${idx}/$repo"; fi
        docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'cd '"'$p'"'; echo -n "[$idx] "; git rev-parse --abbrev-ref HEAD; git status -s'
      else
        local i=1
        while [[ "$i" -le 6 ]]; do
          local p; if [[ "$i" -eq 1 ]]; then p="$base/$repo"; else p="$base/agent${i}/$repo"; fi
          docker compose $(compose_files) exec --index "$i" dev-agent bash -lc 'cd '"'$p'"' 2>/dev/null && docker compose $(compose_files) exec --index "$i" dev-agent bash -lc 'cd '"'$p'"'; echo -n "[$i] "; git rev-parse --abbrev-ref HEAD; git status -s' || true
          i=$((i+1))
        done
      fi
      ;;
    worktrees-sync)
      # worktrees-sync <repo> (--pull|--push) [--all|--index N]
      ensure_project
      [[ "$PROJECT" == "dev-all" ]] || die "Use -p dev-all for worktrees-sync"
      local repo="${args[0]:-}"; shift || true
      local op=""; if [[ "${args[0]:-}" == "--pull" || "${args[0]:-}" == "--push" ]]; then op="${args[0]}"; shift; else die "Specify --pull or --push"; fi
      local idx=""; if [[ "${args[0]:-}" == "--index" ]]; then idx="${args[1]:-}"; fi
      local base="/workspaces/dev"
      if [[ -n "$idx" ]]; then
        local p; if [[ "$idx" -eq 1 ]]; then p="$base/$repo"; else p="$base/agent${idx}/$repo"; fi
        local cmd='git pull --ff-only'; [[ "$op" == "--push" ]] && cmd='git push'
        docker compose $(compose_files) exec --index "$idx" dev-agent bash -lc 'set -e; cd '"'$p'"'; '"'$cmd'"''
      else
        local i=1
        while [[ "$i" -le 6 ]]; do
          local p; if [[ "$i" -eq 1 ]]; then p="$base/$repo"; else p="$base/agent${i}/$repo"; fi
          local cmd='git pull --ff-only'; [[ "$op" == "--push" ]] && cmd='git push'
          docker compose $(compose_files) exec --index "$i" dev-agent bash -lc 'cd '"'$p'"' 2>/dev/null && docker compose $(compose_files) exec --index "$i" dev-agent bash -lc 'set -e; cd '"'$p'"'; '"'$cmd'"'' || true
          i=$((i+1))
        done
      fi
      ;;
    bootstrap)
      # bootstrap <repo> <count>  (dev-all only)
      ensure_project
      [[ "$PROJECT" == "dev-all" ]] || die "Use -p dev-all for bootstrap"
      local repo="${args[0]:-}"; local n="${args[1]:-2}"; [[ -n "$repo" ]] || die "Usage: -p dev-all bootstrap <repo> <count>"
      "$0" worktrees-init "$repo" "$n"
      "$0" -p dev-all worktrees-tmux "$repo" "$n"
      ;;
    open)
      # open <count> (codex overlay only) — shared mount but per-agent HOME + SSH
      ensure_project
      [[ "$PROJECT" != "dev-all" ]] || die "Use tmux-shells or worktrees-tmux under dev-all"
      local n="${args[0]:-2}"
      docker compose $(compose_files) up -d --scale dev-agent="$n"
      local j=1; while [[ "$j" -le "$n" ]]; do "$0" -p "$PROJECT" ssh-setup --index "$j" >/dev/null 2>&1 || true; j=$((j+1)); done
      local sess="devkit-open"
      local home1="/workspace/.devhome-agent1"
      tmux new-session -d -s "$sess" "docker compose $(compose_files) exec --index 1 dev-agent bash -lc 'mkdir -p \"$home1\"; export HOME=\"$home1\"; cd /workspace; exec bash'"
      tmux rename-window -t "$sess":0 "agent-1" >/dev/null 2>&1 || true
      local i=2
      while [[ "$i" -le "$n" ]]; do
        local homei="/workspace/.devhome-agent${i}"
        tmux new-window -t "$sess" -n "agent-$i" "docker compose $(compose_files) exec --index $i dev-agent bash -lc 'mkdir -p \"$homei\"; export HOME=\"$homei\"; cd /workspace; exec bash'"
        i=$((i+1))
      done
      tmux attach -t "$sess"
      ;;
    worktrees-tmux)
      # worktrees-tmux <repo> <count>
      # Uses dev-all overlay: opens N windows, each cd into the repo/worktree and sets per-agent HOME.
      ensure_project
      [[ "$PROJECT" == "dev-all" ]] || die "Use -p dev-all for worktrees-tmux"
      local repo="${args[0]:-}"; local n="${args[1]:-2}"
      [[ -n "$repo" ]] || die "Usage: -p dev-all worktrees-tmux <repo> <count>"
      # Initialize N worktrees from host
      "$0" worktrees-init "$repo" "$n"
      # Bring up N agents
      docker compose $(compose_files) up -d --scale dev-agent="$n"
      # Compute dev root inside container
      local base="/workspaces/dev"
      # tmux session
      local sess="devkit-worktrees"
      # Window 1: primary clone path
      local home1="$base/$repo/.devhome-agent1"
      tmux new-session -d -s "$sess" "docker compose $(compose_files) exec --index 1 dev-agent bash -lc 'mkdir -p \"$home1\"; export HOME=\"$home1\"; cd \"$base/$repo\"; exec bash'"
      tmux rename-window -t "$sess":0 "agent-1" >/dev/null 2>&1 || true
      # Remaining windows: agent2..N paths under base prefix
      local i=2
      while [[ "$i" -le "$n" ]]; do
        local wpath="$base/agent${i}/$repo"
        local whome="$base/agent${i}/.devhome-agent${i}"
        # ensure ssh setup
        "$0" -p "$PROJECT" ssh-setup --index "$i" >/dev/null 2>&1 || true
        tmux new-window -t "$sess" -n "agent-$i" "docker compose $(compose_files) exec --index $i dev-agent bash -lc 'mkdir -p \"$whome\"; export HOME=\"$whome\"; cd \"$wpath\"; exec bash'"
        i=$((i+1))
      done
      tmux attach -t "$sess"
      ;;
  esac
}

main "$@"
