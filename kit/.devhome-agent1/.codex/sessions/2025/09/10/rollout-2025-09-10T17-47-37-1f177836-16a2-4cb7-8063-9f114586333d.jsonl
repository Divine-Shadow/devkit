{"id":"1f177836-16a2-4cb7-8063-9f114586333d","timestamp":"2025-09-10T17:47:37.639Z","instructions":"# AGENTS.md\n\nHere's a precise and clear articulation of your concept that captures the structure and intent you've described:\n\n\n## Architecture and Development Guide\n\n- Start with [documentation/engineering/architecture/README.md](documentation/engineering/architecture/README.md) for a concise index of key topics.\n  - Read in full any sections that pertain to your assigned task, especially around the effect system.\n- The full guide is available at [documentation/engineering/README_Architecture_And_Development_Guide.md](documentation/engineering/README_Architecture_And_Development_Guide.md)\n\nTip: For a containerized development environment, see the Dev Mode (Docker) quickstart in the top-level [README.md](README.md#dev-mode-docker-quickstart), then dive into [documentation/engineering/dev-mode/README.md](documentation/engineering/dev-mode/README.md).\n\n## Git Workflow Quick Pointers\n\n- Strategy: see [Git Strategy and Philosophy](documentation/engineering/git_README.md) and [Git Worktrees and Isolation](documentation/engineering/git_worktrees_and_isolation.md).\n- Linear history: we use short‑lived task branches that rebase onto `origin/main`, then “Rebase and merge” (no squash) to keep `main` linear.\n- Helpers:\n  - Apply local repo defaults: `tools/git/setup-local-config.sh`\n  - Sync your branch with `main`: `git sync` (alias for `tools/git/sync.sh --rebase`)\n  - Create per‑agent worktrees: see examples in [Git Worktrees and Isolation](documentation/engineering/git_worktrees_and_isolation.md).\n\n## Documentation Structure\n\nDocumentation in this repository is organized as a navigable **tree of concise, linked pages**, each ideally fewer than 200 lines, designed to protect working memory and ensure precise discoverability. Navigation through the documentation follows a wiki-like structure, using meta-pages that provide clear entry points and breadcrumbs to related topics, enabling quick traversal and indexing of relevant information as needs arise.\n\nWhen reviewing documentation, agents are expected to reference linked pages whenever they are relevant to their current task. Similarly, when creating or updating documentation, agents must ensure that new pages are properly linked within the existing documentation tree, ultimately connecting back, through one or more intermediary pages, to an `AGENTS.md` file. This structure ensures all documentation remains discoverable, logically organized, and cognitively manageable.\n\nIt's often helpful to make links bidirectional, so that someone finding a leaf can trace their way up the tree.\n\n### Documentation Layout\n- All additional guides are located in the `documentation` directory.\n  - `engineering/` – development and architecture guides.\n  - `domain/` – business domain references.\n  - `philosophy/` – culture and rationale documents.\n\n## Supplemental Guidelines\n- Follow and apply architectural and structural patterns established by the project.\n- Focus only on implementing the solution or fixing the issue. Do not refactor, modify, or delete any existing code or comment unless directly related to the solution / fix.\n  - You may propose such refactors in the `documentation/tech-debt` folder.\n- Follow and apply common coding and naming conventions used in the project. For example, to resolve shadowing, use the \"underscore suffix\" pattern. See `conversion/Impl.scala` and `compatibility/Impl.scala` for examples.\n  - The class path is part of the API surface. \n  - Avoid stuttered names like `UserId` or `ConversationId` when the package already provides context (`user.Id`, `conversation.Id`).\n  - Do not alias (`user.Id => UserId`); this hides the namespace and defeats the style.\n  - If a qualified name grows unwieldy, reconsider the package boundaries instead of tolerating excessive prefixes.\n  - For services, let the package path provide context; for example, `apps.services.account.creation.Service` is preferred over `apps.services.account.CreationService`.\n  - See [Naming and Namespace Conventions](documentation/engineering/architecture/naming_conventions.md) for detailed rules and examples.\n- Proactively review comments affected by your changes and update/delete them as needed. Delete obsolete and orphaned comments.\n- Aside from compile errors, you must also resolve all warnings.\n- When grepping, it's recommended to exclude target files as they can create noise that overwhelms the results.\n- Do not use abbreviations in your naming.\n\n## Living Documents\nMany projects have living progress documents associated with them. The workflow for these looks like:\n- Agents implement the plan and steps outlined in the plans, there's some freedom for deviation around what makes the most sense once you're actually coding.\n- Deviations, implementations, and challenges arising from insufficient information are added to the documentation\n- The architects review the documentation, respond to questions, and annotate key steps\n- The next round of agent work begins and the cycle repeats\n\nTherefore, it's important to ensure that each agent session ends with leaving a clear blueprint that, once addressed by the architects, provides a clear path forward for the next agent round.\n\n## Testing\n- Run unit tests for the feature/fix. Example command: `sbt \"project apps\" \"testOnly com.crib.bills.ouroboros.apps.services.document.compatibility.*\"`\n- If there are no tests yet for the feature/fix, run `sbt compile`.\n- The environment's Scala code is pre-compiled during setup, so `sbt compile` may appear unusually fast when no changes are detected. Use `sbt clean compile` to force a full rebuild if needed, though this is generally unnecessary.\n\n## Before commit\n- Sanity check: run `sbt compile`\n\n## Commit Instructions\n- Message format: [`Feature`]/[`Fix`] `Description`\n- Example: \"[Download Support] Initially added Service, Stub, and Impl\"\n\n## PR Instructions\n- Title format: [`Feature`]/[`Fix`]: `Feature Name`/`Fix Description`\n- Example: \"Feature: Download Support\"\n- Start with a one-line summary and a \"Testing Done\" section\n- Then add a paragraph with any available context around why the changes were made and any significant design decisions.\n\n## CLI Tools\n- See `Codex_Environment_Setup.sh` if you need more information about what CLI tools have been installed.\n\n## Requests\n\n### AWS Permissions\nIf you have issues accessing aws resources, commit a request including _why_ and _what_ you need under `documentation/requests`\n\n#### Region\nAny region-based needs should use `us-east-2` unless explicitly told otherwise\n\n### Network Restrictions\nIf you have issues reaching something over the internet, follow the same procedure as aws permissions but be sure to include the exact domain you need, wildcards are not supported.\n\n### Secrets and Data\nLikewise, if you're blocked on needing a secret, s3 bucket name, or data (like a sample file) fill out a request including what you need, where you need it, and why.\n","git":{"commit_hash":"eba7aeec812040f9faedde31264bc25b6cfcc989","branch":"agent1","repository_url":"git@github.com:Divine-Shadow/ouroboros-ide.git"}}
{"record_type":"state"}
{"type":"message","id":null,"role":"user","content":[{"type":"input_text","text":"<user_instructions>\n\n# AGENTS.md\n\nHere's a precise and clear articulation of your concept that captures the structure and intent you've described:\n\n\n## Architecture and Development Guide\n\n- Start with [documentation/engineering/architecture/README.md](documentation/engineering/architecture/README.md) for a concise index of key topics.\n  - Read in full any sections that pertain to your assigned task, especially around the effect system.\n- The full guide is available at [documentation/engineering/README_Architecture_And_Development_Guide.md](documentation/engineering/README_Architecture_And_Development_Guide.md)\n\nTip: For a containerized development environment, see the Dev Mode (Docker) quickstart in the top-level [README.md](README.md#dev-mode-docker-quickstart), then dive into [documentation/engineering/dev-mode/README.md](documentation/engineering/dev-mode/README.md).\n\n## Git Workflow Quick Pointers\n\n- Strategy: see [Git Strategy and Philosophy](documentation/engineering/git_README.md) and [Git Worktrees and Isolation](documentation/engineering/git_worktrees_and_isolation.md).\n- Linear history: we use short‑lived task branches that rebase onto `origin/main`, then “Rebase and merge” (no squash) to keep `main` linear.\n- Helpers:\n  - Apply local repo defaults: `tools/git/setup-local-config.sh`\n  - Sync your branch with `main`: `git sync` (alias for `tools/git/sync.sh --rebase`)\n  - Create per‑agent worktrees: see examples in [Git Worktrees and Isolation](documentation/engineering/git_worktrees_and_isolation.md).\n\n## Documentation Structure\n\nDocumentation in this repository is organized as a navigable **tree of concise, linked pages**, each ideally fewer than 200 lines, designed to protect working memory and ensure precise discoverability. Navigation through the documentation follows a wiki-like structure, using meta-pages that provide clear entry points and breadcrumbs to related topics, enabling quick traversal and indexing of relevant information as needs arise.\n\nWhen reviewing documentation, agents are expected to reference linked pages whenever they are relevant to their current task. Similarly, when creating or updating documentation, agents must ensure that new pages are properly linked within the existing documentation tree, ultimately connecting back, through one or more intermediary pages, to an `AGENTS.md` file. This structure ensures all documentation remains discoverable, logically organized, and cognitively manageable.\n\nIt's often helpful to make links bidirectional, so that someone finding a leaf can trace their way up the tree.\n\n### Documentation Layout\n- All additional guides are located in the `documentation` directory.\n  - `engineering/` – development and architecture guides.\n  - `domain/` – business domain references.\n  - `philosophy/` – culture and rationale documents.\n\n## Supplemental Guidelines\n- Follow and apply architectural and structural patterns established by the project.\n- Focus only on implementing the solution or fixing the issue. Do not refactor, modify, or delete any existing code or comment unless directly related to the solution / fix.\n  - You may propose such refactors in the `documentation/tech-debt` folder.\n- Follow and apply common coding and naming conventions used in the project. For example, to resolve shadowing, use the \"underscore suffix\" pattern. See `conversion/Impl.scala` and `compatibility/Impl.scala` for examples.\n  - The class path is part of the API surface. \n  - Avoid stuttered names like `UserId` or `ConversationId` when the package already provides context (`user.Id`, `conversation.Id`).\n  - Do not alias (`user.Id => UserId`); this hides the namespace and defeats the style.\n  - If a qualified name grows unwieldy, reconsider the package boundaries instead of tolerating excessive prefixes.\n  - For services, let the package path provide context; for example, `apps.services.account.creation.Service` is preferred over `apps.services.account.CreationService`.\n  - See [Naming and Namespace Conventions](documentation/engineering/architecture/naming_conventions.md) for detailed rules and examples.\n- Proactively review comments affected by your changes and update/delete them as needed. Delete obsolete and orphaned comments.\n- Aside from compile errors, you must also resolve all warnings.\n- When grepping, it's recommended to exclude target files as they can create noise that overwhelms the results.\n- Do not use abbreviations in your naming.\n\n## Living Documents\nMany projects have living progress documents associated with them. The workflow for these looks like:\n- Agents implement the plan and steps outlined in the plans, there's some freedom for deviation around what makes the most sense once you're actually coding.\n- Deviations, implementations, and challenges arising from insufficient information are added to the documentation\n- The architects review the documentation, respond to questions, and annotate key steps\n- The next round of agent work begins and the cycle repeats\n\nTherefore, it's important to ensure that each agent session ends with leaving a clear blueprint that, once addressed by the architects, provides a clear path forward for the next agent round.\n\n## Testing\n- Run unit tests for the feature/fix. Example command: `sbt \"project apps\" \"testOnly com.crib.bills.ouroboros.apps.services.document.compatibility.*\"`\n- If there are no tests yet for the feature/fix, run `sbt compile`.\n- The environment's Scala code is pre-compiled during setup, so `sbt compile` may appear unusually fast when no changes are detected. Use `sbt clean compile` to force a full rebuild if needed, though this is generally unnecessary.\n\n## Before commit\n- Sanity check: run `sbt compile`\n\n## Commit Instructions\n- Message format: [`Feature`]/[`Fix`] `Description`\n- Example: \"[Download Support] Initially added Service, Stub, and Impl\"\n\n## PR Instructions\n- Title format: [`Feature`]/[`Fix`]: `Feature Name`/`Fix Description`\n- Example: \"Feature: Download Support\"\n- Start with a one-line summary and a \"Testing Done\" section\n- Then add a paragraph with any available context around why the changes were made and any significant design decisions.\n\n## CLI Tools\n- See `Codex_Environment_Setup.sh` if you need more information about what CLI tools have been installed.\n\n## Requests\n\n### AWS Permissions\nIf you have issues accessing aws resources, commit a request including _why_ and _what_ you need under `documentation/requests`\n\n#### Region\nAny region-based needs should use `us-east-2` unless explicitly told otherwise\n\n### Network Restrictions\nIf you have issues reaching something over the internet, follow the same procedure as aws permissions but be sure to include the exact domain you need, wildcards are not supported.\n\n### Secrets and Data\nLikewise, if you're blocked on needing a secret, s3 bucket name, or data (like a sample file) fill out a request including what you need, where you need it, and why.\n\n\n</user_instructions>"}]}
{"type":"message","id":null,"role":"user","content":[{"type":"input_text","text":"<environment_context>\n  <cwd>/workspaces/dev/ouroboros-ide</cwd>\n  <approval_policy>never</approval_policy>\n  <sandbox_mode>read-only</sandbox_mode>\n  <network_access>restricted</network_access>\n</environment_context>"}]}
{"record_type":"state"}
{"type":"message","id":null,"role":"user","content":[{"type":"input_text","text":"reply with: ok"}]}
{"record_type":"state"}
